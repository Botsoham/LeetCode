from typing import List

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]

        # Initialize sets with existing numbers
        for r in range(9):
            for c in range(9):
                if board[r][c] != '.':
                    val = board[r][c]
                    rows[r].add(val)
                    cols[c].add(val)
                    boxes[(r // 3) * 3 + (c // 3)].add(val)

        def backtrack(r=0, c=0):
            if r == 9:
                return True  # reached end

            # Move to next row if end of column
            if c == 9:
                return backtrack(r + 1, 0)

            if board[r][c] != '.':
                return backtrack(r, c + 1)

            for ch in '123456789':
                box_index = (r // 3) * 3 + (c // 3)
                if ch not in rows[r] and ch not in cols[c] and ch not in boxes[box_index]:
                    board[r][c] = ch
                    rows[r].add(ch)
                    cols[c].add(ch)
                    boxes[box_index].add(ch)

                    if backtrack(r, c + 1):
                        return True

                    # Undo changes (backtrack)
                    board[r][c] = '.'
                    rows[r].remove(ch)
                    cols[c].remove(ch)
                    boxes[box_index].remove(ch)

            return False

        backtrack()
