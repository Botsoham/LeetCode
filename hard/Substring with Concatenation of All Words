from collections import Counter

class Solution:
    def findSubstring(self, s: str, words: list[str]) -> list[int]:
        if not s or not words:
            return []
        
        word_len = len(words[0])
        word_count = len(words)
        substring_len = word_len * word_count
        word_map = Counter(words)
        
        res = []
        
        # We try different starting points (word_len possible shifts)
        for i in range(word_len):
            left = i
            seen = Counter()
            for j in range(i, len(s) - word_len + 1, word_len):
                word = s[j:j + word_len]
                if word in word_map:
                    seen[word] += 1
                    # If word appears more than allowed, shrink from left
                    while seen[word] > word_map[word]:
                        seen[s[left:left + word_len]] -= 1
                        left += word_len
                    # If window matches all words
                    if j + word_len - left == substring_len:
                        res.append(left)
                else:
                    seen.clear()
                    left = j + word_len
        
        return res
