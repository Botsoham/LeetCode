class Node:
    def __init__(self, count):
        self.count = count
        self.keys = set()
        self.prev = None
        self.next = None

class AllOne:

    def __init__(self):
        self.key_map = {}  # key -> Node
        self.head = Node(float('-inf'))  # Dummy head
        self.tail = Node(float('inf'))   # Dummy tail
        self.head.next = self.tail
        self.tail.prev = self.head

    def _add_node_after(self, new_node, prev_node):
        new_node.prev = prev_node
        new_node.next = prev_node.next
        prev_node.next.prev = new_node
        prev_node.next = new_node

    def _remove_node(self, node):
        node.prev.next = node.next
        node.next.prev = node.prev

    def inc(self, key: str) -> None:
        if key in self.key_map:
            curr_node = self.key_map[key]
            next_count = curr_node.count + 1
            if curr_node.next.count != next_count:
                new_node = Node(next_count)
                self._add_node_after(new_node, curr_node)
            else:
                new_node = curr_node.next
            new_node.keys.add(key)
            self.key_map[key] = new_node
            curr_node.keys.remove(key)
            if not curr_node.keys:
                self._remove_node(curr_node)
        else:
            # New key, count = 1
            if self.head.next.count != 1:
                new_node = Node(1)
                self._add_node_after(new_node, self.head)
            else:
                new_node = self.head.next
            new_node.keys.add(key)
            self.key_map[key] = new_node

    def dec(self, key: str) -> None:
        curr_node = self.key_map[key]
        if curr_node.count == 1:
            # remove key completely
            del self.key_map[key]
            curr_node.keys.remove(key)
            if not curr_node.keys:
                self._remove_node(curr_node)
        else:
            prev_count = curr_node.count - 1
            if curr_node.prev.count != prev_count:
                new_node = Node(prev_count)
                self._add_node_after(new_node, curr_node.prev)
            else:
                new_node = curr_node.prev
            new_node.keys.add(key)
            self.key_map[key] = new_node
            curr_node.keys.remove(key)
            if not curr_node.keys:
                self._remove_node(curr_node)

    def getMaxKey(self) -> str:
        if self.tail.prev == self.head:
            return ""
        return next(iter(self.tail.prev.keys))

    def getMinKey(self) -> str:
        if self.head.next == self.tail:
            return ""
        return next(iter(self.head.next.keys))
